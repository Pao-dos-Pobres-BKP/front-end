name: CI/CD

on:
  push:
    branches: ["main", "master"]
  workflow_dispatch:

env:
  DOCKER_BUILDKIT: "1"
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
  ECR_REPO: ${{ vars.ECR_REPO }}
  VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
  ECR_URL: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_DEFAULT_REGION }}.amazonaws.com
  IMAGE: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_DEFAULT_REGION }}.amazonaws.com/${{ vars.ECR_REPO }}

jobs:
  local_test_build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn
      - run: yarn install --frozen-lockfile
      - run: yarn build
        env:
          VITE_API_BASE_URL: ${{ env.VITE_API_BASE_URL }}
      # - run: yarn test --ci

  build_and_push:
    runs-on: ubuntu-latest
    needs: local_test_build
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS (OIDC)
        if: secrets.AWS_ROLE_TO_ASSUME != ''
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

      - name: Configure AWS (Access Keys)
        if: secrets.AWS_ROLE_TO_ASSUME == '' && secrets.AWS_ACCESS_KEY_ID != '' && secrets.AWS_SECRET_ACCESS_KEY != ''
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - uses: aws-actions/amazon-ecr-login@v2

      - run: |
          docker system prune -af || true
          docker builder prune -af || true
          docker image prune -af || true

      - name: Set tag
        id: meta
        run: echo "sha7=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"

      - name: Echo build arg
        run: echo "VITE_API_BASE_URL=${VITE_API_BASE_URL}"

      - name: Build
        run: |
          docker build \
            --build-arg VITE_API_BASE_URL="${VITE_API_BASE_URL}" \
            --build-arg VITE_BASE_PATH="/fe/" \
            -t "${IMAGE}:${{ steps.meta.outputs.sha7 }}" \
            -t "${IMAGE}:latest" \
            -f Dockerfile .

      - name: Push (SHA tag)
        run: docker push "${IMAGE}:${{ steps.meta.outputs.sha7 }}"

  deploy_to_ec2:
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Compute image ref
        id: meta
        run: echo "image_ref=${IMAGE}:${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"

      - name: Deploy via SSH (Docker Swarm)
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_EC2_PRIVATE_KEY }}
          script_stop: true
          script: |
            echo "Deploying ${{ steps.meta.outputs.image_ref }} to '${{ vars.SERVICE_NAME }}'"

            aws ecr get-login-password --region "${AWS_DEFAULT_REGION}" \
              | sudo docker login --username AWS --password-stdin "${ECR_URL}"

            sudo docker pull "${{ steps.meta.outputs.image_ref }}"

            sudo docker service update \
              --with-registry-auth \
              --image "${{ steps.meta.outputs.image_ref }}" \
              --env-add VITE_API_BASE_URL="${VITE_API_BASE_URL}" \
              "${{ vars.SERVICE_NAME }}"